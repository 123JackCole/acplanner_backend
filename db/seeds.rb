require "rest-client"

# Removes all old user accounts
User.destroy_all

# Removes all old checklists associated with user accounts
Dailychecklist.destroy_all
Task.destroy_all

# Removes all old bug, fish, fossil, and villager data
# Collectable.destroy_all
# Bug.destroy_all
# Fish.destroy_all
# Fossil.destroy_all
# Villager.destroy_all

main_collection = Collectable.create(name: "seed_collection")

API_ENDPOINT = "https://nookipedia.com/api/"

API_KEY = 1df0466a-0645-4a04-a2e4-4c1b69b92c4b; # ENV["API_KEY"]

# Current list of Bugs
def bugNames()
  bugNames = [
    "Agrias_Butterfly",
    "Ant",
    "Atlas_Moth",
    "Bagworm",
    "Banded_Dragonfly",
    "Bell_Cricket",
    "Blue_Weevil_Beetle",
    "Brown_Cicada",
    "Centipede",
    "Cicada_Shell",
    "Citrus_Long-Horned_Beetle",
    "Common_Bluebottle",
    "Common_Butterfly",
    "Cricket",
    "Cyclommatus_Stag",
    "Damselfly",
    "Darner_Dragonfly",
    "Diving_Beetle",
    "Drone_Beetle",
    "Dung_Beetle",
    "Earth-Boring_Dung_Beetle",
    "Emperor_Butterfly",
    "Evening_Cicada",
    "Firefly",
    "Flea",
    "Fly",
    "Giant_Cicada",
    "Giant_Stag",
    "Giant_Water_Bug",
    "Giraffe_Stag",
    "Golden_Stag",
    "Goliath_Beetle",
    "Grasshopper",
    "Great_Purple_Emperor",
    "Hermit_Crab",
    "Honeybee",
    "Horned_Atlas",
    "Horned_Dynastid",
    "Horned_Elephant",
    "Horned_Hercules",
    "Jewel_Beetle",
    "Ladybug",
    "Long_Locust",
    "Madagascan_Sunset_Moth",
    "Man-Faced_Stink_Bug",
    "Mantis",
    "Migratory_Locust",
    "Miyama_Stag",
    "Mole_Cricket",
    "Monarch_Butterfly",
    "Mosquito",
    "Moth",
    "Orchid_Mantis",
    "Paper_Kite_Butterfly",
    "Peacock_Butterfly",
    "Pill_Bug",
    "Pondskater",
    "Queen_Alexandra's_Birdwing",
    "Rainbow_Stag",
    "Rajah_Brooke's_Birdwing",
    "Red_Dragonfly",
    "Rice_Grasshopper",
    "Robust_Cicada",
    "Rosalia_Batesi_Beetle",
    "Saw_Stag",
    "Scarab_Beetle",
    "Scorpion",
    "Snail",
    "Spider",
    "Stinkbug",
    "Tarantula",
    "Tiger_Beetle",
    "Tiger_Butterfly",
    "Violin_Beetle",
    "Walker_Cicada",
    "Walking_Leaf",
    "Walking_Stick",
    "Wasp",
    "Wharf_Roach",
    "Yellow_Butterfly",
  ]
  return bugNames
end

# Current list of Fish
def fishNames()
  fishNames = [
    "Anchovy",
    "Angelfish",
    "Arapaima",
    "Arowana",
    "Barred_Knifejaw",
    "Barreleye",
    "Betta",
    "Bitterling",
    "Black_Bass",
    "Blowfish",
    "Blue_Marlin",
    "Bluegill",
    "Butterfly_Fish",
    "Carp",
    "Catfish",
    "Char",
    "Cherry_Salmon",
    "Clown_Fish",
    "Coelacanth",
    "Crawfish",
    "Crucian_Carp",
    "Dab",
    "Dace",
    "Dorado",
    "Football_Fish",
    "Freshwater_Goby",
    "Frog",
    "Gar",
    "Giant_Snakehead",
    "Giant_Trevally",
    "Golden_Trout",
    "Goldfish",
    "Great_White_Shark",
    "Guppy",
    "Hammerhead_Shark",
    "Horse_Mackerel",
    "Killifish",
    "King_Salmon",
    "Koi",
    "Loach",
    "Mahi-Mahi",
    "Mitten_Crab",
    "Moray_Eel",
    "Napoleonfish",
    "Neon_Tetra",
    "Nibble_Fish",
    "Oarfish",
    "Ocean_Sunfish",
    "Olive_Flounder",
    "Pale_Chub",
    "Pike",
    "Piranha",
    "Pond_Smelt",
    "Pop-Eyed_Goldfish",
    "Puffer_Fish",
    "Rainbowfish",
    "Ranchu_Goldfish",
    "Ray",
    "Red_Snapper",
    "Ribbon_Eel",
    "Saddled_Bichir",
    "Salmon",
    "Saw_Shark",
    "Sea_Bass",
    "Sea_Butterfly",
    "Sea_Horse",
    "Snapping_Turtle",
    "Soft-Shelled_Turtle",
    "Squid",
    "Stringfish",
    "Sturgeon",
    "Suckerfish",
    "Surgeonfish",
    "Sweetfish",
    "Tadpole",
    "Tilapia",
    "Tuna",
    "Whale_Shark",
    "Yellow_Perch",
    "Zebra_Turkeyfish",
  ]
  return fishNames
end

# Current list of Fossils
def fossilNames()
  fossilNames = [
    "Acanthostega",
    "Amber",
    "Ammonite",
    "Ankylosaurus",
    "Anomalocaris",
    "Archaeopteryx",
    "Archelon",
    "Australopithecus",
    "Brachiosaurus",
    "Coprolite",
    # "Deinonychus",
    "Dimetrodon",
    "Dinosaur_Track",
    "Diplodocus",
    "Dunkleosteus",
    "Eusthenopteron",
    "Iguanodon",
    "Juramaia",
    "Mammoth",
    "Megacerops",
    "Megaloceros",
    "Myllokunmingia",
    "Ophthalmosaurus",
    "Pachycephalosaurus",
    "Parasaurolophus",
    "Plesiosaurus",
    "Pteranodon",
    "Quetzalcoatlus",
    "Sabertooth_Tiger",
    "Shark_Tooth_Pattern",
    "Spinosaurus",
    "Stegosaurus",
    "Triceratops",
    "Trilobite",
    "Tyrannosaurus_Rex",
  ]
  return fossilNames
end

# Current list of Villagers
def villagerNames()
  villagerNames = [
    "Admiral",
    "Agent_S",
    "Agnes",
    "Al",
    "Alfonso",
    "Alice",
    "Alli",
    "Amelia",
    "Anabelle",
    "Anchovy",
    "Ankha",
    "Angus",
    "Anicotti",
    "Annalisa",
    "Annalise",
    "Antonio",
    "Apollo",
    "Apple",
    "Astrid",
    "Audie",
    "Aurora",
    "Ava",
    "Avery",
    "Axel",
    "Baabara",
    "Bam",
    "Bangle",
    "Barold",
    "Beau",
    "Bea",
    "Beardo",
    "Becky",
    "Bella",
    "Benedict",
    "Benjamin",
    "Bertha",
    "Bettina",
    "Bianca",
    "Biff",
    "Big_Top",
    "Bill",
    "Billy",
    "Biskit",
    "Bitty",
    "Blaire",
    "Blanche",
    "Bluebear",
    "Bob",
    "Bonbon",
    "Bones",
    "Boomer",
    "Boone",
    "Boone",
    "Boris",
    "Boyd",
    "Bree",
    "Broccolo",
    "Bruce",
    "Broffina",
    "Bubbles",
    "Buck",
    "Bud",
    "Bunnie",
    "Butch",
    "Buzz",
    "Cally",
    "Camofrog",
    "Canberra",
    "Candi",
    "Carmen",
    "Caroline",
    "Carrie",
    "Cashmere",
    "Celia",
    "Cesar",
    "Chadder",
    "Charlise",
    "Cheri",
    "Cherry",
    "Chester",
    "Chevre",
    "Chief",
    "Chops",
    "Chow",
    "Chrissy",
    "Claude",
    "Claudia",
    "Clay",
    "Cleo",
    "Clyde",
    "Coach",
    "Cobb",
    "Coco",
    "Cole",
    "Colton",
    "Cookie",
    "Cousteau",
    "Cranston",
    "Croque",
    "Cube",
    "Curlos",
    "Curly",
    "Curt",
    "Cyd",
    "Cyrano",
    "Daisy",
    "Deena",
    "Deirdre",
    "Del",
    "Deli",
    "Derwin",
    "Diana",
    "Diva",
    "Dizzy",
    "Dobie",
    "Doc",
    "Dom",
    "Dora",
    "Dotty",
    "Drago",
    "Drake",
    "Drift",
    "Ed",
    "Egbert",
    "Elise",
    "Ellie",
    "Elmer",
    "Eloise",
    "Elvis",
    "Erik",
    "Eunice",
    "Eugene",
    "Fang",
    "Fauna",
    "Felicity",
    "Filbert",
    "Flip",
    "Flo",
    "Flora",
    "Flurry",
    "Francine",
    "Frank",
    "Freckles",
    "Freya",
    "Friga",
    "Frita",
    "Frobert",
    "Fuchsia",
    "Gabi",
    "Gala",
    "Gaston",
    "Gayle",
    "Genji",
    "Gigi",
    "Gladys",
    "Gloria",
    "Goldie",
    "Gonzo",
    "Goose",
    "Graham",
    "Greta",
    "Grizzly",
    "Groucho",
    "Gruff",
    "Gwen",
    "Hamlet",
    "Hamphrey",
    "Hans",
    "Harry",
    "Hazel",
    "Henry",
    "Hippeux",
    "Hopkins",
    "Hopper",
    "Hornsby",
    "Huck",
    "Hugh",
    "Iggly",
    "Ike",
    "Jacob",
    "Jacques",
    "Jambette",
    "Jay",
    "Jeremiah",
    "Jitters",
    "Joey",
    "Judy",
    "Julia",
    "Julian",
    "June",
    "Kabuki",
    "Katt",
    "Keaton",
    "Ken",
    "Ketchup",
    "Kevin",
    "Kid_Cat",
    "Kidd",
    "Kiki",
    "Kitt",
    "Kitty",
    "Klaus",
    "Knox",
    "Kody",
    "Kyle",
    "Leonardo",
    "Leopold",
    "Lily",
    "Limberg",
    "Lionel",
    "Lobo",
    "Lolly",
    "Lopez",
    "Louie",
    "Lucha",
    "Lucky",
    "Lucy",
    "Lyman",
    "Mac",
    "Maddie",
    "Maelle",
    "Maggie",
    "Mallary",
    "Maple",
    "Margie",
    "Marcel",
    "Marcie",
    "Marina",
    "Marshal",
    "Mathilda",
    "Megan",
    "Melba",
    "Merengue",
    "Merry",
    "Midge",
    "Mint",
    "Mira",
    "Miranda",
    "Mitzi",
    "Moe",
    "Molly",
    "Monique",
    "Monty",
    "Moose",
    "Mott",
    "Muffy",
    "Murphy",
    "Nan",
    "Nana",
    "Naomi",
    "Nate",
    "Nibbles",
    "Norma",
    "Octavian",
    "O'Hare",
    "Olaf",
    "Olive",
    "Olivia",
    "Opal",
    "Ozzie",
    "Pancetti",
    "Pango",
    "Papi",
    "Paolo",
    "Pashmina",
    "Pate",
    "Patty",
    "Paula",
    "Peaches",
    "Peanut",
    "Pecan",
    "Peck",
    "Peewee",
    "Peggy",
    "Pekoe",
    "Penelope",
    "Phil",
    "Phoebe",
    "Pierce",
    "Pietro",
    "Pinky",
    "Piper",
    "Pippy",
    "Plucky",
    "Pompom",
    "Poncho",
    "Poppy",
    "Portia",
    "Prince",
    "Puck",
    "Puddles",
    "Pudge",
    "Punchy",
    "Purrl",
    "Queenie",
    "Quillson",
    "Raddle",
    "Rasher",
    "Raymond",
    "Renee",
    "Reneigh",
    "Rex",
    "Rhonda",
    "Ribbot",
    "Ricky",
    "Rizzo",
    "Roald",
    "Robin",
    "Rocco",
    "Rocket",
    "Rod",
    "Rodeo",
    "Rodney",
    "Rolf",
    "Rooney",
    "Rory",
    "Roscoe",
    "Rosie",
    "Rowan",
    "Ruby",
    "Rudy",
    "Sally",
    "Samson",
    "Sandy",
    "Savannah",
    "Scoot",
    "Scoot",
    "Sheldon",
    "Shep",
    "Sherb",
    "Simon",
    "Skye",
    "Sly",
    "Snake",
    "Snooty",
    "Soleil",
    "Sparro",
    "Spike",
    "Spork",
    "Sprinkle",
    "Sprocket",
    "Static",
    "Stella",
    "Sterling",
    "Stinky",
    "Stitches",
    "Stu",
    "Sydney",
    "Sylvana",
    "Sylvia",
    "Tabby",
    "Tad",
    "Tammi",
    "Tammy",
    "Tangy",
    "Tank",
    "T-Bone",
    "Tasha",
    "Teddy",
    "Tex",
    "Tia",
    "Tiffany",
    "Timbra",
    "Tipper",
    "Tom",
    "Truffles",
    "Tucker",
    "Tutu",
    "Twiggy",
    "Tybalt",
    "Ursala",
    "Velma",
    "Vesta",
    "Vic",
    "Victoria",
    "Violet",
    "Vivian",
    "Vladimir",
    "Wade",
    "Walker",
    "Walt",
    "Wart_Jr.",
    "Weber",
    "Wendy",
    "Winnie",
    "Whitney",
    "Willow",
    "Wolfgang",
    "Yuka",
    "Zell",
    "Zucker",
  ]
  return villagerNames
end

def seedBugs(bugsArray)
  bugsArray.each_with_index do |element, index|
    begin
      RestClient.get("#{API_ENDPOINT}critter/#{bugsArray[index]}/?api_key=#{API_KEY}") { |response, request, result, &block|
        case response.code
        when 200
          bug = JSON.parse(response)
          Bug.create(
            collectable_id: Collectable.find_by(name: "seed_collection").id,
            name: bug["name"],
            image: bug["image"],
            scientific_name: bug["scientific-name"],
            family: bug["family"],
            time_year: bug["time-year"],
            time_day: bug["time-day"],
            location: bug["location"],
            size: bug["size"],
            rarity: bug["rarity"],
            price: bug["price"],
          )
          puts bug["name"]
        else
        #   ''
          # response.return!(request, result, &block)
          puts "something went wrong with #{element}, error #{response.code}"
        end
      }
    end
    sleep(11)
  end
end

def seedFish(fishArray)
  fishArray.each_with_index do |element, index|
    begin
      RestClient.get("#{API_ENDPOINT}critter/#{fishArray[index]}/?api_key=#{API_KEY}") { |response, request, result, &block|
        case response.code
        when 200
          fish = JSON.parse(response)
          Fish.create(
            collectable_id: Collectable.find_by(name: "seed_collection").id,
            name: fish["name"],
            image: fish["image"],
            scientific_name: fish["scientific-name"],
            family: fish["family"],
            time_year: fish["time-year"],
            time_day: fish["time-day"],
            location: fish["location"],
            size: fish["size"],
            rarity: fish["rarity"],
            price: fish["price"],
            shadow: fish["shadow"],
          )
          puts fish["name"]
        else
        #   ''
          # response.return!(request, result, &block)
          puts "something went wrong with #{element}, error #{response.code}"
        end
      }
    end
    sleep(11)
  end
end

def seedFossils(fossilsArray)
  fossilsArray.each_with_index do |element, index|
    begin
      RestClient.get("#{API_ENDPOINT}fossil/#{fossilsArray[index]}/?api_key=#{API_KEY}") { |response, request, result, &block|
        case response.code
        when 200
          fossil = JSON.parse(response)
          Fossil.create(
            collectable_id: Collectable.find_by(name: "seed_collection").id,
            name: fossil["name"],
            image: fossil["image"],
            scientific_name: fossil["scientific-name"],
            sections: fossil["sections"],
            period: fossil["period"],
            length: fossil["length"],
            price: fossil["price"],
          )
          puts fossil["name"]
        else
        #   ''
          # response.return!(request, result, &block)
          puts "something went wrong with #{element}, error #{response.code}"
        end
      }
    end
    sleep(11)
  end
end

def seedVillagers(villagersArray)
  villagersArray.each_with_index do |element, index|
    begin
      RestClient.get("#{API_ENDPOINT}villager/#{villagersArray[index]}/?api_key=#{API_KEY}") { |response, request, result, &block|
        case response.code
        when 200
          villager = JSON.parse(response)
          Villager.create(
            name: villager["name"],
            image: villager["image"],
            quote: villager["quote"],
            gender: villager["gender"],
            personality: villager["personality"],
            species: villager["species"],
            birthday: villager["birthday"],
            sign: villager["sign"],
            phrase: villager["phrase"],
            clothes: villager["clothes"],
            siblings: villager["siblings"],
            goal: villager["goal"],
            fear: villager["fear"],
            favclothing: villager["favclothing"],
            leastfavclothing: villager["leastfavclothing"],
            favcolor: villager["favcolor"],
          )
          puts villager["name"]
        else
        #   ''
          # response.return!(request, result, &block)
          puts "something went wrong with #{element}, error #{response.code}"
        end
      }
    end
    sleep(11)
  end
end

def callApi()
#   seedBugs(bugNames())
#   sleep(1)
#   seedFish(fishNames())
#   sleep(1)
#   seedFossils(fossilNames())
#   sleep(1)
#   seedVillagers(villagerNames())
end

callApi()
